'''
다이나믹 프로그래밍을 활용한 대표적인 최단 경로 탐색 알고리즘
특정한 하나의 정점에서 다른 모든 정점으로 가는 최단 경로

다익스트라 알고리즘이 다이나믹 프로그래밍 문제인 이유는 최단 거리는 여러 개의 최단 거리로 이루어져있기 때문이다
1. 하나의 최단 거리를 구할 때 그 이전까지 구했던 최단 거리 정보를 그대로 사용한다  :  다이나믹 프로그래밍의 특성
2. 그리디의 특성

다익스트라 알고리즘은 '현재까지 알고 있던 최단경로를 계속해서 갱신'

작동 과정
1. 출발 노드 설정
2. 출발 노드를 기준으로 각 노드의 최소비용을 저장
3. 방문하지 않은 노드 중에서 가장 비용이 적은 노드를 선택
4. 해당 노드를 거쳐서 특정한 노드로 가능 경우를 고려하여 최소 비용을 갱신

그래프는, 실제로 컴퓨터 내에서 처리할 때 이차원 배열의 형태로 처리해야 한다
'''
inf = int(1e9)

n,m = map(int, input().split())
start = int(input())
g = [[] for i in range(n+1)]
visited = [False]*(n+1)
distance = [inf]*(n+1)

for _ in range(m):
    a,b,c = map(int, input().split())
    g[a].append([b,c])

def print_g(g):
    for i in range(len(g)):
        print(g[i])

# 6 11
# 1
# 1 2 2
# 1 3 5
# 1 4 1
# 2 3 3
# 2 4 2
# 3 2 3
# 3 6 5
# 4 3 3
# 4 5 1
# 5 3 1
# 5 6 2
print_g(g)
print(visited)
print(distance)