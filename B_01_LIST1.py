print('hello')
print('hello')

# 알고리즘의 성능 분석 기준으로 알고리즘의 작업량을 비교
# 시간 복잡도 : 실제 걸리는 시간을 측정 / 실행되는 명령문의 개수를 계산
# 파이썬은 미리 기계어로 컴파일 해 두는 것이 아니라 실행시마다 소스를 기계어로 번역해서, 느리지만 플랫폼에상관 없이 좋음
# 객체지향
# 하나의 변수에 다른 타입의 값을 변수에 저장 가능하다 / 변수에 값을 초기화 시 변수가 메모리에 직접 생성
# <<참조형>>
a = 10
print(type(a))
arr = []
arr = list()
# 리스트는 같은 타입의 데이터만 저장 가능한 배열과 달리 다양한 데이터를 저장할 수있 다.
#
# 인덱싱, 슬라이싱 모두 적용 가능
# 시퀀스 자료형과 동일하게 적용이 가능함
a = [1,2,3]
b = [4,5]
print(len(a))
print(a+b)
print(a*2)

# 내장함수 중 중요 : len, + 연결, * 반복, sorted
mylist = [2,3,4,5,6]
newlist = [i for i in mylist if i%2==0]    # 용어 : 리스트함축
print(newlist)

# 3차시 _ Exhaustive search
# 완전검색 : 문제의 해법으로 생각할 수 있는 모든 경우의 수를 나열해보고 확인하는 기법
# 모든 경우를 순열로 나열해서 여부를 테스트하고...
# 4차시 :  그리디
# 최적 해를 구하는데 사용되는 근시안적인 방법
# 여러 경우 중 하나를 결정해야 할 때마다 그 순간에 최적이라고 생각되는 것을 선택해 나가는 방식으로 진행하여 최종적인 해답에 도달함
